generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  password      String
  trips         Trip[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Template      Template[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Trip {
  id           String        @id @default(uuid())
  name         String
  destination  String
  startDate    DateTime
  endDate      DateTime
  notes        String?
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  packingLists PackingList[]
}

model PackingList {
  id         String  @id @default(uuid())
  name       String
  tripId     String
  trip       Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade)
  items      Item[]
  isTemplate Boolean @default(false)
  shareId    String? @unique @default(uuid())
}

model Item {
  id            String      @id @default(uuid())
  name          String
  category      String
  quantity      Int
  packed        Boolean     @default(false)
  packingListId String
  packingList   PackingList @relation(fields: [packingListId], references: [id], onDelete: Cascade)
}

model Template {
  id        String         @id @default(uuid())
  name      String
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  items     TemplateItem[]
  createdAt DateTime       @default(now())
}

model TemplateItem {
  id         String   @id @default(uuid())
  name       String
  category   String?
  quantity   Int
  templateId String
  template   Template @relation(fields: [templateId], references: [id])
}
